
     int ans=0;
     int counter=1;
     
     void dfs(vector<int>adj[],int V,int c,int d,vector<int>&lt,vector<int>&it,vector<bool>&visited,int parent,int sv)
     {
         visited[sv]=true;
         lt[sv]=it[sv]=counter++;
         for(auto e:adj[sv])
         {
             if(parent==e)continue;
             else if(!visited[e])
             {
                 dfs(adj,V,c,d,lt,it,visited,sv,e);
                 if(it[sv]<lt[e])
                 {
                     if((sv==c && e==d) ||(sv==d && e==c))
                     ans=1;
                 }
                
             }
             lt[sv]=min(lt[sv],lt[e]);
            
         }
     }
     
     
     
     
     
     
    
    int isBridge(int V, vector<int> adj[], int c, int d) 
    {
        
       
       
        vector<int>lt(V,0),it(V,0);
        vector<bool>visited(V,false);
        
        for(int i=0;i<V;i++)
        {
            if(!visited[i])
            {
                dfs(adj,V,c,d,lt,it,visited,-1,i);
            }
        }
        
        return ans;
        
        
    }
